!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module TsyganenkoWrapper ! in 
    interface  ! in :TsyganenkoWrapper
        module compute ! in :TsyganenkoWrapper:TsyganenkoWrapper.f90
            subroutine run_ta16(parmod,ps,x,y,z,bx,by,bz,nx,ny,nz) ! in :TsyganenkoWrapper:TsyganenkoWrapper.f90:compute
                use ta16, only : rbf_model_2016
                real(kind=8) dimension(10), intent(in) :: parmod
                real(kind=8), intent(in) :: ps
                real(kind=8) dimension(nx), intent(in) :: x
                real(kind=8) dimension(ny), intent(in) :: y
                real(kind=8) dimension(nz), intent(in) :: z
                real(kind=8) dimension(nx,ny,nz),depend(nx,ny,nz), intent(out) :: bx
                real(kind=8) dimension(nx,ny,nz),depend(nx,ny,nz), intent(out) :: by
                real(kind=8) dimension(nx,ny,nz),depend(nx,ny,nz), intent(out) :: bz
                integer, optional,check(shape(x, 0) == nx),depend(x), intent(hide) :: nx=shape(x, 0)
                integer, optional,check(shape(y, 0) == ny),depend(y), intent(hide) :: ny=shape(y, 0)
                integer, optional,check(shape(z, 0) == nz),depend(z), intent(hide) :: nz=shape(z, 0)
            end subroutine run_ta16
            subroutine run_ts05(parmod,ps,x,y,z,bx,by,bz,nx,ny,nz) ! in :TsyganenkoWrapper:TsyganenkoWrapper.f90:compute
                use ts05, only : t04_s
                real(kind=8) dimension(10), intent(in) :: parmod
                real(kind=8), intent(in) :: ps
                real(kind=8) dimension(nx), intent(in) :: x
                real(kind=8) dimension(ny), intent(in) :: y
                real(kind=8) dimension(nz), intent(in) :: z
                real(kind=8) dimension(nx,ny,nz),depend(nx,ny,nz), intent(out) :: bx
                real(kind=8) dimension(nx,ny,nz),depend(nx,ny,nz), intent(out) :: by
                real(kind=8) dimension(nx,ny,nz),depend(nx,ny,nz), intent(out) :: bz
                integer, optional,check(shape(x, 0) == nx),depend(x), intent(hide) :: nx=shape(x, 0)
                integer, optional,check(shape(y, 0) == ny),depend(y), intent(hide) :: ny=shape(y, 0)
                integer, optional,check(shape(z, 0) == nz),depend(z), intent(hide) :: nz=shape(z, 0)
            end subroutine run_ts05
            subroutine run_igrf_dipole(iyear,iday,ihour,imin,isec,vx_gse,vy_gse,vz_gse,x_gsw,y_gsw,z_gsw,hx_gsw,hy_gsw,hz_gsw,nx,ny,nz) ! in :TsyganenkoWrapper:TsyganenkoWrapper.f90:compute
                use geopack_dipoles, only : recalc_08, igrf_gsw_08
                integer, intent(in) :: iyear
                integer, intent(in) :: iday
                integer, intent(in) :: ihour
                integer, intent(in) :: imin
                integer, intent(in) :: isec
                real(kind=8), intent(in) :: vx_gse
                real(kind=8), intent(in) :: vy_gse
                real(kind=8), intent(in) :: vz_gse
                real(kind=8) dimension(nx), intent(in) :: x_gsw
                real(kind=8) dimension(ny), intent(in) :: y_gsw
                real(kind=8) dimension(nz), intent(in) :: z_gsw
                real(kind=8) dimension(nx,ny,nz),depend(nx,ny,nz), intent(out) :: hx_gsw
                real(kind=8) dimension(nx,ny,nz),depend(nx,ny,nz), intent(out) :: hy_gsw
                real(kind=8) dimension(nx,ny,nz),depend(nx,ny,nz), intent(out) :: hz_gsw
                integer, optional,check(shape(x_gsw, 0) == nx),depend(x_gsw), intent(hide) :: nx=shape(x_gsw, 0)
                integer, optional,check(shape(y_gsw, 0) == ny),depend(y_gsw), intent(hide) :: ny=shape(y_gsw, 0)
                integer, optional,check(shape(z_gsw, 0) == nz),depend(z_gsw), intent(hide) :: nz=shape(z_gsw, 0)
            end subroutine run_igrf_dipole
            subroutine run_dipole(iyear,iday,ihour,imin,isec,vx_gse,vy_gse,vz_gse,x_gsw,y_gsw,z_gsw,hx_gsw,hy_gsw,hz_gsw,nx,ny,nz) ! in :TsyganenkoWrapper:TsyganenkoWrapper.f90:compute
                use geopack, only : dip_08, recalc_08
                integer, intent(in) :: iyear
                integer, intent(in) :: iday
                integer, intent(in) :: ihour
                integer, intent(in) :: imin
                integer, intent(in) :: isec
                real(kind=8), intent(in) :: vx_gse
                real(kind=8), intent(in) :: vy_gse
                real(kind=8), intent(in) :: vz_gse
                real(kind=8) dimension(nx), intent(in) :: x_gsw
                real(kind=8) dimension(ny), intent(in) :: y_gsw
                real(kind=8) dimension(nz), intent(in) :: z_gsw
                real(kind=8) dimension(nx,ny,nz),depend(nx,ny,nz), intent(out) :: hx_gsw
                real(kind=8) dimension(nx,ny,nz),depend(nx,ny,nz), intent(out) :: hy_gsw
                real(kind=8) dimension(nx,ny,nz),depend(nx,ny,nz), intent(out) :: hz_gsw
                integer, optional,check(shape(x_gsw, 0) == nx),depend(x_gsw), intent(hide) :: nx=shape(x_gsw, 0)
                integer, optional,check(shape(y_gsw, 0) == ny),depend(y_gsw), intent(hide) :: ny=shape(y_gsw, 0)
                integer, optional,check(shape(z_gsw, 0) == nz),depend(z_gsw), intent(hide) :: nz=shape(z_gsw, 0)
             end subroutine run_dipole

            subroutine field(x,y,z,dateinfo,velocity,parmod,ps,modelnumber,dipolenumber,bx,by,bz,nx,ny,nz) ! in :TsyganenkoWrapper:TsyganenkoWrapper.f90:compute
                use magnetospheremodels, only: compute_field
                real(kind=8) dimension(nx),intent(in) :: x
                real(kind=8) dimension(ny),intent(in) :: y
                real(kind=8) dimension(nz),intent(in) :: z
                integer dimension(5),intent(in) :: dateinfo
                real(kind=8) dimension(3),intent(in) :: velocity
                real(kind=8) dimension(10),intent(in) :: parmod
                real(kind=8) intent(in) :: ps
                integer intent(in) :: modelnumber
                integer intent(in) :: dipolenumber
                real(kind=8) dimension(nx,ny,nz),intent(out),depend(nz,ny,nx) :: bx
                real(kind=8) dimension(nx,ny,nz),intent(out),depend(nz,ny,nx) :: by
                real(kind=8) dimension(nx,ny,nz),intent(out),depend(nz,ny,nx) :: bz
                integer, optional,check(shape(x, 0) == nx),depend(x) :: nx=shape(x, 0)
                integer, optional,check(shape(y, 0) == ny),depend(y) :: ny=shape(y, 0)
                integer, optional,check(shape(z, 0) == nz),depend(z) :: nz=shape(z, 0)
            end subroutine field
            subroutine metrics(x,y,z,bx,by,bz,mout,nx,ny,nz) ! in :TsyganenkoWrapper:TsyganenkoWrapper.f90:compute
                use reconnectionmetrics, only: compute_all_metrics
                real(kind=8) dimension(nx),intent(in) :: x
                real(kind=8) dimension(ny),intent(in) :: y
                real(kind=8) dimension(nz),intent(in) :: z
                real(kind=8) dimension(nx,ny,nz),intent(in),depend(nz,ny,nx) :: bx
                real(kind=8) dimension(nx,ny,nz),intent(in),depend(nz,ny,nx) :: by
                real(kind=8) dimension(nx,ny,nz),intent(in),depend(nz,ny,nx) :: bz
                real(kind=8) dimension(23,nx,ny,nz),intent(out),depend(nz,ny,nx) :: mout
                integer, optional,check(shape(x, 0) == nx),depend(x) :: nx=shape(x, 0)
                integer, optional,check(shape(y, 0) == ny),depend(y) :: ny=shape(y, 0)
                integer, optional,check(shape(z, 0) == nz),depend(z) :: nz=shape(z, 0)
            end subroutine metrics
        end module compute
    end interface 
end python module TsyganenkoWrapper

! This file was auto-generated with f2py (version:2.2.4).
! See:
! https://web.archive.org/web/20140822061353/http://cens.ioc.ee/projects/f2py2e
